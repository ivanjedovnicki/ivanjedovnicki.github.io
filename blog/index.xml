<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on ivan jedovnicki</title><link>https://ivanjedovnicki.github.io/blog/</link><description>Recent content in Blogs on ivan jedovnicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 Sep 2023 07:51:26 +0200</lastBuildDate><atom:link href="https://ivanjedovnicki.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Multithreading</title><link>https://ivanjedovnicki.github.io/blog/python/multithreading/</link><pubDate>Sat, 16 Sep 2023 07:51:26 +0200</pubDate><guid>https://ivanjedovnicki.github.io/blog/python/multithreading/</guid><description>Introduction Link to heading Few discussions regarding multithreading in Python can escape the infamous GIL and the qualification that Python is lacking real multithreading support. In this blog post we will explore, on a few examples whether those qualifications have merit, and if they do, what conditions make them true. Before we start exploring those questions, let&amp;rsquo;s cover some basic concepts.
Threads vs. Processes Link to heading The CPU has a very limited, specialized language it understands called the instruction set.</description></item><item><title>The in Operator</title><link>https://ivanjedovnicki.github.io/blog/python/the-in-operator/</link><pubDate>Sat, 01 Jul 2023 19:10:35 +0200</pubDate><guid>https://ivanjedovnicki.github.io/blog/python/the-in-operator/</guid><description>Introduction Link to heading If you use the in operator in Python, testing whether an element is present in a collection is almost as easy as asking a question.
&amp;gt;&amp;gt;&amp;gt; &amp;#39;one&amp;#39; in [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;] True &amp;gt;&amp;gt;&amp;gt; &amp;#39;four&amp;#39; in (&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;) False &amp;gt;&amp;gt;&amp;gt; &amp;#39;five&amp;#39; in {&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;} False &amp;gt;&amp;gt;&amp;gt; &amp;#39;three&amp;#39; in {&amp;#39;one&amp;#39;: 1, &amp;#39;two&amp;#39;: 2, &amp;#39;three&amp;#39;: 3} True From the examples above, we can see that the in operator works with various collection types: lists, tuples, sets, and dictionaries.</description></item></channel></rss>